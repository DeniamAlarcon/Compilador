/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Compiladores;

import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 *
 * @author Eduardo Gallegos
 */
public class Principal extends javax.swing.JFrame {

    int vecSal[];
    // Incluye todos los datos del codigo etiquetado en el analisis lexico
    String vecDatos[][];

    // Errores
    boolean errorLexico = true;
    boolean errorSintactico = true;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTFuente = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTCompilado = new javax.swing.JTextArea();
        jL1 = new javax.swing.JLabel();
        jL2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jBSintactico = new javax.swing.JButton();
        jBCargar = new javax.swing.JButton();
        jBSemantico = new javax.swing.JButton();
        jBLexico = new javax.swing.JButton();
        jBIntermedio = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBOptimizacion = new javax.swing.JButton();
        jBObjeto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(966, 566));

        jPanel1.setBackground(new java.awt.Color(204, 236, 239));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTFuente.setBackground(new java.awt.Color(240, 232, 205));
        jTFuente.setColumns(20);
        jTFuente.setRows(5);
        jTFuente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFuenteKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTFuente);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 660, 410));

        jTCompilado.setEditable(false);
        jTCompilado.setBackground(new java.awt.Color(240, 232, 205));
        jTCompilado.setColumns(20);
        jTCompilado.setRows(5);
        jScrollPane2.setViewportView(jTCompilado);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 700, 410));

        jL1.setFont(new java.awt.Font("Palatino Linotype", 1, 24)); // NOI18N
        jL1.setText("Programa Fuente");
        jPanel1.add(jL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, -1));

        jL2.setFont(new java.awt.Font("Palatino Linotype", 1, 24)); // NOI18N
        jL2.setText("Programa Compilado");
        jPanel1.add(jL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 40, -1, -1));

        jButton1.setBackground(new java.awt.Color(253, 222, 238));
        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 610, 80, -1));

        jBSintactico.setBackground(new java.awt.Color(221, 212, 232));
        jBSintactico.setText("Sintáctico");
        jBSintactico.setEnabled(false);
        jBSintactico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSintacticoMouseClicked(evt);
            }
        });
        jBSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSintacticoActionPerformed(evt);
            }
        });
        jPanel1.add(jBSintactico, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 690, -1, -1));

        jBCargar.setBackground(new java.awt.Color(253, 222, 238));
        jBCargar.setText("Cargar");
        jBCargar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBCargarMouseClicked(evt);
            }
        });
        jBCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCargarActionPerformed(evt);
            }
        });
        jPanel1.add(jBCargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 610, -1, -1));

        jBSemantico.setBackground(new java.awt.Color(221, 212, 232));
        jBSemantico.setText("Semántico");
        jBSemantico.setEnabled(false);
        jBSemantico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSemanticoMouseClicked(evt);
            }
        });
        jBSemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSemanticoActionPerformed(evt);
            }
        });
        jPanel1.add(jBSemantico, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 690, -1, -1));

        jBLexico.setBackground(new java.awt.Color(221, 212, 232));
        jBLexico.setText("Léxico");
        jBLexico.setEnabled(false);
        jBLexico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBLexicoMouseClicked(evt);
            }
        });
        jBLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLexicoActionPerformed(evt);
            }
        });
        jPanel1.add(jBLexico, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 610, -1, -1));

        jBIntermedio.setBackground(new java.awt.Color(221, 212, 232));
        jBIntermedio.setText("Intermedio");
        jBIntermedio.setEnabled(false);
        jBIntermedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBIntermedioMouseClicked(evt);
            }
        });
        jBIntermedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBIntermedioActionPerformed(evt);
            }
        });
        jPanel1.add(jBIntermedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 690, -1, -1));

        jBGuardar.setBackground(new java.awt.Color(221, 212, 232));
        jBGuardar.setText("Guardar");
        jBGuardar.setEnabled(false);
        jBGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBGuardarMouseClicked(evt);
            }
        });
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(jBGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 610, -1, -1));

        jBOptimizacion.setBackground(new java.awt.Color(221, 212, 232));
        jBOptimizacion.setText("Optimización");
        jBOptimizacion.setEnabled(false);
        jBOptimizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBOptimizacionMouseClicked(evt);
            }
        });
        jPanel1.add(jBOptimizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 690, -1, -1));

        jBObjeto.setBackground(new java.awt.Color(221, 212, 232));
        jBObjeto.setText("Objeto");
        jBObjeto.setEnabled(false);
        jBObjeto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBObjetoMouseClicked(evt);
            }
        });
        jBObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBObjetoActionPerformed(evt);
            }
        });
        jPanel1.add(jBObjeto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 610, -1, -1));

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBCargarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCargarMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se cargará el archivo");
        jBGuardar.setEnabled(true);
        jBLexico.setEnabled(true);
        jBSintactico.setEnabled(false);
        jBSemantico.setEnabled(false);
        jBIntermedio.setEnabled(false);
        jBOptimizacion.setEnabled(false);
        jBObjeto.setEnabled(false);
        jTFuente.setText(ManejoDeArchivos.cargarArchivo());
    }//GEN-LAST:event_jBCargarMouseClicked

    private void jBGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBGuardarMouseClicked
        // TODO add your handling code here:
        ManejoDeArchivos.guardarArchivo(jTFuente.getText());
        jTCompilado.setText("Se guardará el archivo");

    }//GEN-LAST:event_jBGuardarMouseClicked

    private void jBLexicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBLexicoMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará el Análisis Léxico");
        jBSintactico.setEnabled(true);
        jBSemantico.setEnabled(false);
        jBIntermedio.setEnabled(false);
        jBOptimizacion.setEnabled(false);
        jBObjeto.setEnabled(false);
        //se usa la tabla de tokens fojos,separadores y automatas
        StringTokenizer st = new StringTokenizer(jTFuente.getText(), "(),;*/{} \n\t\r=+-<>!&\"", true);
        String texto = "";
        String t[] = texto.split(" ");
        String cadena = "";
        while (st.hasMoreElements()) {
            cadena = st.nextToken();
            if (cadena.equals("=") || cadena.equals("<") || cadena.equals(">") || cadena.equals("!")) {
                texto = texto + cadena;
                if (st.hasMoreElements()) {
                    cadena = st.nextToken();
                    if (cadena.equals("=")) {
                        texto = texto + cadena + "\n";
                    } else {
                        texto = texto + "\n" + cadena + "\n";
                    }
                }
            } else {
                if (cadena.equals("+")) {
                    texto = texto + cadena;
                    if (st.hasMoreElements()) {
                        cadena = st.nextToken();
                        if (cadena.equals("+")) {
                            texto = texto + cadena + "\n";
                        } else {
                            texto = texto + "\n" + cadena + "\n";
                        }
                    }
                } else {
                    if (cadena.equals("-")) {
                        texto = texto + cadena;
                        if (st.hasMoreElements()) {
                            cadena = st.nextToken();
                            if (cadena.equals("-")) {
                                texto = texto + cadena + "\n";
                            } else {
                                texto = texto + "\n" + cadena + "\n";
                            }
                        }
                    } else {
                        if (cadena.equals("&")) {
                            texto = texto + cadena;
                            if (st.hasMoreElements()) {
                                cadena = st.nextToken();
                                if (cadena.equals("&")) {
                                    texto = texto + cadena + "\n";
                                } else {
                                    texto = texto + "\n" + cadena + "\n";
                                }
                            }
                        } else {
                            if (cadena.equals('"')) {
                                texto = texto + cadena;
                                while (st.hasMoreElements()) {
                                    cadena = st.nextToken();
                                    if (cadena.equals("\n")) {
                                        cadena = " ";
                                    }
                                    if (cadena.equals('"') || cadena.equals("\r")) {
                                        break;
                                    }
                                    if (cadena.equals(" ") || cadena.equals("\t")) {
                                        cadena = " ";
                                    }
                                    texto = texto + cadena;
                                }
                                texto = texto + cadena + "\n";
                            } else if (cadena.equals(" ") || cadena.equals("\t")) {
                                cadena = "";
                            } else {
                                texto = texto + cadena + "\n";
                            }
                        }
                    }

                }
            }

        }
        StringTokenizer st2 = new StringTokenizer(texto, "\n\r\f");
        texto = "";
        Lexico objLex2 = new Lexico();
        vecSal = new int[st2.countTokens()];
        vecDatos = new String[st2.countTokens()][3];
        int i = 0;
        int indiceDatos = 0;
        while (st2.hasMoreElements()) {
            objLex2 = objLex2.etiquetar(st2.nextToken());
            texto = texto + "\n" + objLex2.lexema + "\t" + objLex2.nombre + "\t" + objLex2.numero;
            vecSal[i] = objLex2.numero;
            vecDatos[indiceDatos][0] = objLex2.lexema;
            vecDatos[indiceDatos][1] = objLex2.nombre;
            vecDatos[indiceDatos][2] = String.valueOf(objLex2.numero);
            i++;
            indiceDatos++;
        }

        jTCompilado.setText(texto);


    }//GEN-LAST:event_jBLexicoMouseClicked

    private void jBSintacticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSintacticoMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará el Análisis Sintáctico");
        // jBSemantico.setEnabled(true);
        jBIntermedio.setEnabled(false);
        jBOptimizacion.setEnabled(false);
        jBObjeto.setEnabled(false);

        errorSintactico = true;

        String cadena = "";
        for (int i = 0; i < vecSal.length; i++) {
            cadena = cadena + vecSal[i] + " ";
        }
        cadena = cadena + "$";
        jTCompilado.setText(cadena);
        jL1.setText("Movimientos");
        jL2.setText("Cadena a validar");
        jTFuente.setText("$ 150");

        //se debe de cargar los estados en forma inversa video 2
        int mg[][] = {{},
        {11, 152, 151, 153, 10},
        {153},
        {156},
        {157},
        {158},
        {160},
        {167},
        {152, 151},
        {},
        {4, 155, 154, 51, 1},
        {164, 3},
        {},
        {155, 154, 51, 2},
        {},
        {4, 11, 51, 2, 53, 10, 9},
        {4, 11, 53, 10, 12},
        {4, 159, 20, 166, 19, 11, 163, 10, 13},
        {20, 166, 19, 14},
        {},
        {4, 161, 3, 51},
        {162, 11, 162, 164, 10},
        {162, 164},
        {161, 168},
        {},
        {165, 11, 164, 15, 164, 10, 16},
        {165, 164, 15, 164},
        {51},
        {50},
        {52},
        {163, 17},
        {},
        {156},
        {157},
        {160},
        {4, 20, 166, 19, 11, 163, 10, 18},
        {5},
        {6},
        {7},
        {8},};

        int mt[][] = new int[19][54];
        for (int i = 0; i < 19; i++) {
            for (int j = 0; j < 54; j++) {
                mt[i][j] = -1;
            }
        }
        mt[0][10] = 1;

        mt[1][1] = 2;
        mt[1][9] = 3;
        mt[1][12] = 4;
        mt[1][13] = 5;
        mt[1][18] = 7;
        mt[1][51] = 6;

        mt[2][1] = 8;
        mt[2][9] = 8;
        mt[2][12] = 8;
        mt[2][13] = 8;
        mt[2][18] = 8;
        mt[2][51] = 8;
        mt[2][11] = 9;

        mt[3][1] = 10;

        mt[4][3] = 11;
        mt[4][2] = 12;
        mt[4][4] = 12;

        mt[5][2] = 13;
        mt[5][4] = 14;

        mt[6][9] = 15;

        mt[7][12] = 16;

        mt[8][13] = 17;

        mt[9][14] = 18;
        mt[9][4] = 19;

        mt[10][51] = 20;

        mt[11][10] = 21;
        mt[11][50] = 22;
        mt[11][51] = 22;
        mt[11][52] = 22;

        mt[12][4] = 24;
        mt[12][11] = 24;
        mt[12][5] = 23;
        mt[12][6] = 23;
        mt[12][7] = 23;
        mt[12][8] = 23;

        mt[13][16] = 25;
        mt[13][50] = 26;
        mt[13][51] = 26;
        mt[13][52] = 26;

        mt[14][50] = 28;
        mt[14][51] = 27;
        mt[14][52] = 29;

        mt[15][11] = 31;
        mt[15][17] = 30;

        mt[16][9] = 32;
        mt[16][12] = 33;
        mt[16][51] = 34;

        mt[17][18] = 35;

        mt[18][5] = 36;
        mt[18][6] = 37;
        mt[18][7] = 38;
        mt[18][8] = 39;

        int vecMov[] = {0, 150};
        int vecMovAux[];
        int i = 0;
        int pr = 0;
        int pc = 0;
        int nl = 0;
        int tv = 0;
        cadena = "";

        do {
            pr = vecMov[vecMov.length - 1];
            if (pr >= 150) {
                pr = pr - 150;
                pc = vecSal[i];
                nl = mt[pr][pc];
                if (nl != -1) {
                    vecMovAux = vecMov;
                    vecMov = new int[(vecMovAux.length + mg[nl].length) - 1];
                    tv = 0;
                    for (int j = 0; j < vecMovAux.length - 1; j++) {
                        vecMov[j] = vecMovAux[j];
                    }
                    for (int j = vecMovAux.length - 1; j < vecMov.length; j++) {
                        vecMov[j] = mg[nl][tv];
                        tv++;

                    }
                    cadena = jTFuente.getText() + "\n";
                    for (int j = 0; j < vecMov.length; j++) {
                        cadena = cadena + vecMov[j] + " ";
                    }
                    jTFuente.setText(cadena);
                    cadena = jTCompilado.getText() + "\n";
                    for (int j = i; j < vecSal.length - 1; j++) {
                        cadena = cadena + vecSal[j] + " ";
                    }
                    cadena = cadena + "$";
                    jTCompilado.setText(cadena);
                } else {
                    int n = 0;
                    Lexico obLex = new Lexico();
                    while (n < obLex.diccionario.length) {
                        if (Integer.toString(vecSal[i]).equals(obLex.diccionario[n][2])) {
                            obLex.nombre = obLex.diccionario[n][1];
                            break;
                        } else if (vecSal[i] == 50) {
                            obLex.nombre = "Entero";
                            break;
                        } else if (vecSal[i] == 51) {
                            obLex.nombre = "Variable";
                            break;
                        } else if (vecSal[i] == 52) {
                            obLex.nombre = "Caracter";
                            break;
                        } else if (vecSal[i] == 53) {
                            obLex.nombre = "Mensaje";
                            break;
                        } else if (vecSal[i] == 1) {
                            obLex.nombre = "tipo de dato";
                            break;
                        } else if (vecSal[i] == 2) {
                            obLex.nombre = ",";
                            break;
                        } else if (vecSal[i] == 3) {
                            obLex.nombre = "=";
                            break;
                        } else if (vecSal[i] == 4) {
                            obLex.nombre = ";";
                            break;
                        } else if (vecSal[i] == 5) {
                            obLex.nombre = "+";
                            break;
                        } else if (vecSal[i] == 6) {
                            obLex.nombre = "-";
                            break;
                        } else if (vecSal[i] == 7) {
                            obLex.nombre = "*";
                            break;
                        } else if (vecSal[i] == 8) {
                            obLex.nombre = "/";
                            break;
                        } else if (vecSal[i] == 9) {
                            obLex.nombre = "scanf";
                            break;
                        } else if (vecSal[i] == 10) {
                            obLex.nombre = "(";
                            break;
                        } else if (vecSal[i] == 11) {
                            obLex.nombre = ")";
                            break;
                        } else if (vecSal[i] == 12) {
                            obLex.nombre = "printf";
                            break;
                        } else if (vecSal[i] == 13) {
                            obLex.nombre = "if";
                            break;
                        } else if (vecSal[i] == 14) {
                            obLex.nombre = "else";
                            break;
                        } else if (vecSal[i] == 15) {
                            obLex.nombre = "Operador relacional";
                            break;
                        } else if (vecSal[i] == 16) {
                            obLex.nombre = "Negacion";
                            break;
                        } else if (vecSal[i] == 17) {
                            obLex.nombre = "Operador logico";
                            break;
                        } else if (vecSal[i] == 18) {
                            obLex.nombre = "while";
                            break;
                        } else if (vecSal[i] == 19) {
                            obLex.nombre = "{";
                            break;
                        } else if (vecSal[i] == 20) {
                            obLex.nombre = "}";
                            break;
                        } else if (vecSal[i] == 21) {
                            obLex.nombre = "--";
                            break;
                        } else if (vecSal[i] == 22) {
                            obLex.nombre = "++";
                            break;
                        } else if (vecSal[i] == 100) {
                            obLex.nombre = "Entero no valido";
                            break;
                        } else if (vecSal[i] == 101) {
                            obLex.nombre = "Variable no valido";
                            break;
                        } else if (vecSal[i] == 102) {
                            obLex.nombre = "Mensaje no valido";
                            break;
                        } else if (vecSal[i] == 103) {
                            obLex.nombre = "Caracter no valido";
                            break;
                        } else if (vecSal[i] == 104) {
                            obLex.nombre = "Caracter desconocido";
                            break;
                        }
                        n++;
                    }
                    System.out.println("");
                    cadena = jTFuente.getText() + "\n Error Sintactico " + obLex.nombre + " se esperaba ";
                    for (int j = 0; j < 54; j++) { //tenia 54
                        if (mt[pr][j] != (-1)) {
                            n = 0;
                            while (n < obLex.diccionario.length) {
                                if (Integer.toString(vecMov[vecMov.length - 1]).equals(obLex.diccionario[n][2])) {
                                    obLex.nombre = obLex.diccionario[n][1];
                                    break;
                                } else if (j == 50) {
                                    obLex.nombre = "Entero";
                                    break;
                                } else if (j == 51) {
                                    obLex.nombre = "Variable";
                                    break;
                                } else if (j == 52) {
                                    obLex.nombre = "Caracter";
                                    break;
                                } else if (j == 53) {
                                    obLex.nombre = "Mensaje";
                                    break;
                                } else if (j == 1) {
                                    obLex.nombre = "tipo de dato";
                                    break;
                                } else if (j == 2) {
                                    obLex.nombre = ",";
                                    break;
                                } else if (j == 3) {
                                    obLex.nombre = "=";
                                    break;
                                } else if (j == 4) {
                                    obLex.nombre = ";";
                                    break;
                                } else if (j == 5) {
                                    obLex.nombre = "+";
                                    break;
                                } else if (j == 6) {
                                    obLex.nombre = "-";
                                    break;
                                } else if (j == 7) {
                                    obLex.nombre = "*";
                                    break;
                                } else if (j == 8) {
                                    obLex.nombre = "/";
                                    break;
                                } else if (j == 9) {
                                    obLex.nombre = "scanf";
                                    break;
                                } else if (j == 10) {
                                    obLex.nombre = "(";
                                    break;
                                } else if (j == 11) {
                                    obLex.nombre = ")";
                                    break;
                                } else if (j == 12) {
                                    obLex.nombre = "printf";
                                    break;
                                } else if (j == 13) {
                                    obLex.nombre = "if";
                                    break;
                                } else if (j == 14) {
                                    obLex.nombre = "else";
                                    break;
                                } else if (j == 15) {
                                    obLex.nombre = "Operador relacional";
                                    break;
                                } else if (j == 16) {
                                    obLex.nombre = "Negacion";
                                    break;
                                } else if (j == 17) {
                                    obLex.nombre = "Operador logico";
                                    break;
                                } else if (j == 18) {
                                    obLex.nombre = "while";
                                    break;
                                } else if (j == 19) {
                                    obLex.nombre = "{";
                                    break;
                                } else if (j == 20) {
                                    obLex.nombre = "}";
                                    break;
                                } else if (j == 21) {
                                    obLex.nombre = "--";
                                    break;
                                } else if (j == 22) {
                                    obLex.nombre = "++";
                                    break;
                                }
                                n++;
                            }
                            cadena = cadena + " | " + obLex.nombre;
                            //cadena = cadena + j + " ";
                        }
                    }

                    jTFuente.setText(cadena);
                    break;

                }
            } else {
                if (vecSal[i] == vecMov[vecMov.length - 1]) {
                    i++;
                    vecMovAux = vecMov;
                    vecMov = new int[vecMovAux.length - 1];
                    for (int j = 0; j < vecMov.length; j++) {
                        vecMov[j] = vecMovAux[j];

                    }
                    cadena = jTFuente.getText() + "\n";
                    for (int j = 0; j < vecMov.length; j++) {
                        cadena = cadena + vecMov[j] + " ";
                    }
                    jTFuente.setText(cadena);
                    cadena = jTCompilado.getText() + "\n";
                    for (int j = i; j < vecSal.length; j++) { //modifique 10
                        cadena = cadena + vecSal[j] + " ";
                    }
                    cadena = cadena + "$";//se agrego
                    jTCompilado.setText(cadena);
                } else {
                    /*cadena = jTFuente.getText() + "\n Error Sintactico al recibir " + vecSal[i] + " se esperaba " + vecMov[vecMov.length - 1];
                    jTFuente.setText(cadena);
                    break;*/

                    if (vecSal[i] == 53) {
                        break;
                    }

                    int n = 0;
                    Lexico obLex = new Lexico();
                    while (n < obLex.diccionario.length) {
                        if (Integer.toString(vecSal[i]).equals(obLex.diccionario[n][2])) {
                            obLex.nombre = obLex.diccionario[n][1];
                            break;
                        } else if (vecSal[i] == 50) {
                            obLex.nombre = "Entero";
                            break;
                        } else if (vecSal[i] == 51) {
                            obLex.nombre = "Variable";
                            break;
                        } else if (vecSal[i] == 52) {
                            obLex.nombre = "Caracter";
                            break;
                        } else if (vecSal[i] == 53) {
                            obLex.nombre = "Mensaje";
                            break;
                        } else if (vecSal[i] == 1) {
                            obLex.nombre = "tipo de dato";
                            break;
                        } else if (vecSal[i] == 2) {
                            obLex.nombre = ",";
                            break;
                        } else if (vecSal[i] == 3) {
                            obLex.nombre = "=";
                            break;
                        } else if (vecSal[i] == 4) {
                            obLex.nombre = ";";
                            break;
                        } else if (vecSal[i] == 5) {
                            obLex.nombre = "+";
                            break;
                        } else if (vecSal[i] == 6) {
                            obLex.nombre = "-";
                            break;
                        } else if (vecSal[i] == 7) {
                            obLex.nombre = "*";
                            break;
                        } else if (vecSal[i] == 8) {
                            obLex.nombre = "/";
                            break;
                        } else if (vecSal[i] == 9) {
                            obLex.nombre = "scanf";
                            break;
                        } else if (vecSal[i] == 10) {
                            obLex.nombre = "(";
                            break;
                        } else if (vecSal[i] == 11) {
                            obLex.nombre = ")";
                            break;
                        } else if (vecSal[i] == 12) {
                            obLex.nombre = "printf";
                            break;
                        } else if (vecSal[i] == 13) {
                            obLex.nombre = "if";
                            break;
                        } else if (vecSal[i] == 14) {
                            obLex.nombre = "else";
                            break;
                        } else if (vecSal[i] == 15) {
                            obLex.nombre = "Operador relacional";
                            break;
                        } else if (vecSal[i] == 16) {
                            obLex.nombre = "Negacion";
                            break;
                        } else if (vecSal[i] == 17) {
                            obLex.nombre = "Operador logico";
                            break;
                        } else if (vecSal[i] == 18) {
                            obLex.nombre = "while";
                            break;
                        } else if (vecSal[i] == 19) {
                            obLex.nombre = "{";
                            break;
                        } else if (vecSal[i] == 20) {
                            obLex.nombre = "}";
                            break;
                        } else if (vecSal[i] == 21) {
                            obLex.nombre = "--";
                            break;
                        } else if (vecSal[i] == 22) {
                            obLex.nombre = "++";
                            break;
                        } else if (vecSal[i] == 100) {
                            obLex.nombre = "Entero no valido";
                            break;
                        } else if (vecSal[i] == 101) {
                            obLex.nombre = "Variable no valido";
                            break;
                        } else if (vecSal[i] == 102) {
                            obLex.nombre = "Mensaje no valido";
                            break;
                        } else if (vecSal[i] == 103) {
                            obLex.nombre = "Caracter no valido";
                            break;
                        } else if (vecSal[i] == 104) {
                            obLex.nombre = "Caracter desconocido";
                            break;
                        }

                        n++;
                    }
                    cadena = jTFuente.getText() + "\nError sintactico al recibir: " + obLex.nombre;
                    n = 0;
                    while (n < obLex.diccionario.length) {
                        if (Integer.toString(vecMov[vecMov.length - 1]).equals(obLex.diccionario[n][2])) {
                            obLex.nombre = obLex.diccionario[n][1];
                            break;
                        } else if (vecMov[vecMov.length - 1] == 50) {
                            obLex.nombre = "Entero";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 51) {
                            obLex.nombre = "Variable";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 52) {
                            obLex.nombre = "Caracter";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 53) {
                            obLex.nombre = "Mensaje";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 1) {
                            obLex.nombre = "tipo de dato";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 2) {
                            obLex.nombre = ",";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 3) {
                            obLex.nombre = "=";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 4) {
                            obLex.nombre = ";";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 5) {
                            obLex.nombre = "+";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 6) {
                            obLex.nombre = "-";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 7) {
                            obLex.nombre = "*";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 8) {
                            obLex.nombre = "/";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 9) {
                            obLex.nombre = "scanf";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 10) {
                            obLex.nombre = "(";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 11) {
                            obLex.nombre = ")";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 12) {
                            obLex.nombre = "printf";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 13) {
                            obLex.nombre = "if";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 14) {
                            obLex.nombre = "else";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 15) {
                            obLex.nombre = "Operador relacional";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 16) {
                            obLex.nombre = "Negacion";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 17) {
                            obLex.nombre = "Operador logico";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 18) {
                            obLex.nombre = "while";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 19) {
                            obLex.nombre = "{";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 20) {
                            obLex.nombre = "}";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 21) {
                            obLex.nombre = "--";
                            break;
                        } else if (vecMov[vecMov.length - 1] == 22) {
                            obLex.nombre = "++";
                            break;
                        }
                        n++;
                    }
                    cadena = cadena + "\nSe esperaba: " + obLex.nombre;
                    jTFuente.setText(cadena);
                    break;

                }

            }

        } while (i < vecSal.length);

        if (vecMov[vecMov.length - 1] == 0) {
            cadena = jTFuente.getText() + "\n Sintacticamente correcto";
            errorSintactico = false;
            jTFuente.setText(cadena);
        }

        // Se activa el boton de analisis semantico si no hay errores
        if (!errorSintactico) {
            jBSemantico.setEnabled(true);
        }

    }//GEN-LAST:event_jBSintacticoMouseClicked

    private void jBSemanticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSemanticoMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará el Análisis Semántico");
        jBOptimizacion.setEnabled(false);
        jBObjeto.setEnabled(false);

        Semantico semantico = new Semantico(vecDatos);
        String analisisSemantico = semantico.analisisSemantico();
        int status = semantico.getStatus();

        if (status == 0) {
            // Sin errores
            jTFuente.setText("");
            jTFuente.setText("Analisis Semantico Correcto.");
            jTCompilado.setText(""); // Se limplia el cuadro de texto
            jTCompilado.setText(analisisSemantico);
            jBIntermedio.setEnabled(true);
        } else {
            jTFuente.setText("");
            jTFuente.setText("Analisis Semantico con Errores.");
            jTCompilado.setText(""); // Se limplia el cuadro de texto
            jTCompilado.setText(analisisSemantico);
            jBIntermedio.setEnabled(false);
        }


    }//GEN-LAST:event_jBSemanticoMouseClicked

    private void jBIntermedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBIntermedioMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará la Codificación de Código Intermedio");
        jBOptimizacion.setEnabled(true);
        jBObjeto.setEnabled(false);
        Intermedio intermedio = new Intermedio(vecDatos);
        jTCompilado.setText(intermedio.generarIntermedio());
        jTFuente.setText("codigo intermedio realizado");
    }//GEN-LAST:event_jBIntermedioMouseClicked

    private void jBOptimizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBOptimizacionMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará la Optimización del Codigo");
        jBObjeto.setEnabled(true);
        Intermedio intermedio1 = new Intermedio(vecDatos);
        Intermedio_optimizado intermedio = new Intermedio_optimizado(vecDatos);
        jTCompilado.setText(intermedio.generarIntermedio());
        jTFuente.setText(intermedio1.generarIntermedio());
    }//GEN-LAST:event_jBOptimizacionMouseClicked

    private void jBObjetoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBObjetoMouseClicked
        // TODO add your handling code here:
        jTCompilado.setText("Se realizará la Generación del Código Objeto");
    }//GEN-LAST:event_jBObjetoMouseClicked

    private void jBCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCargarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCargarActionPerformed

    private void jTFuenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFuenteKeyTyped
        // TODO add your handling code here:
        jBGuardar.setEnabled(true);
        jBLexico.setEnabled(true);
        jBSintactico.setEnabled(false);
        jBSemantico.setEnabled(false);
        jBIntermedio.setEnabled(false);
        jBOptimizacion.setEnabled(false);
        jBObjeto.setEnabled(false);
    }//GEN-LAST:event_jTFuenteKeyTyped

    private void jBLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLexicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBLexicoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTFuente.setText(" ");
        jTCompilado.setText(" ");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBSemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSemanticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSemanticoActionPerformed

    private void jBSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSintacticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSintacticoActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBIntermedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBIntermedioActionPerformed

        String codigo = jTCompilado.getText();
        System.out.println(codigo);
    }//GEN-LAST:event_jBIntermedioActionPerformed

    private void jBObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBObjetoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBObjetoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCargar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBIntermedio;
    private javax.swing.JButton jBLexico;
    private javax.swing.JButton jBObjeto;
    private javax.swing.JButton jBOptimizacion;
    private javax.swing.JButton jBSemantico;
    private javax.swing.JButton jBSintactico;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jL1;
    private javax.swing.JLabel jL2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTCompilado;
    private javax.swing.JTextArea jTFuente;
    // End of variables declaration//GEN-END:variables
}
